<included>
  <!-- logback-variables.properties에 정의되어 있는 Key를 사용하기 위한 코드 -->
  <property resource="logback-variables.properties" />

  <appender name="REQUEST1" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_DIR}/request1.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_DIR}/archive/request1.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
<!--      <maxFileSize>10MB</maxFileSize>-->
      <maxFileSize>1KB</maxFileSize> <!-- 로그파일의 최대 크기 -->
      <maxHistory>30</maxHistory> <!-- 로그파일 최대 보관주기(단위 : 일) / 보관주기가 넘어가면 파일은 자동으로 삭제 -->
    </rollingPolicy>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>[REQUEST1] ${LOG_PATTERN}</pattern>
      <!--
      ## outputPatternAsHeader
      - File 헤더에 pattern을 출력한다.
      - ref : https://logback.qos.ch/manual/encoders.html#outputPatternAsHeader
      ex) #logback.classic pattern: [%-5level] %d{yyyy-MM-dd HH:mm:ss} [%thread] [%logger{0}:%line] - %msg%n
      -->
      <outputPatternAsHeader>true</outputPatternAsHeader>
    </encoder>
  </appender>

  <appender name="REQUEST2" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_DIR}/request2.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_DIR}/archive/request2.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <maxFileSize>1KB</maxFileSize>
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>[REQUEST2] ${LOG_PATTERN}</pattern>
      <outputPatternAsHeader>true</outputPatternAsHeader>
    </encoder>
  </appender>

  <appender name="MDC" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_DIR}/mdc.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_DIR}/archive/mdc.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <maxFileSize>1KB</maxFileSize>
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>[MDC] %X{job}%n</pattern>
      <outputPatternAsHeader>true</outputPatternAsHeader>
    </encoder>
  </appender>

  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_DIR}/error.log</file>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${LOG_DIR}/archive/error.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
<!--
## rollingPolicy에서 "SizeAndTimeBasedRollingPolicy"가 아니라 "TimeBasedRollingPolicy"를 사용하는 경우

In versions prior to 1.1.7,
this document mentioned a component called SizeAndTimeBasedFNATP.
However, given that SizeAndTimeBasedRollingPolicy offers a simpler configuration structure,
we no longer document SizeAndTimeBasedFNATP.
Nevertheless, earlier configuration files using SizeAndTimeBasedFNATP will continue to work just fine.
In fact, SizeAndTimeBasedRollingPolicy is implemented with a SizeAndTimeBasedFNATP subcomponent.

- ref : https://logback.qos.ch/manual/appenders.html
-->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>1KB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <maxHistory>60</maxHistory>
    </rollingPolicy>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${LOG_PATTERN}</pattern>
      <outputPatternAsHeader>true</outputPatternAsHeader>
    </encoder>
  </appender>

  <appender name="QUERY" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_DIR}/query.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_DIR}/archive/query.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <maxFileSize>1KB</maxFileSize>
      <maxHistory>60</maxHistory>
    </rollingPolicy>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${LOG_PATTERN}</pattern>
      <outputPatternAsHeader>true</outputPatternAsHeader>
    </encoder>
  </appender>

  <root level="INFO">
    <appender-ref ref="REQUEST1" />
    <appender-ref ref="REQUEST2" />
    <appender-ref ref="MDC" />
    <appender-ref ref="ERROR" />
  </root>

  <!--
  - Custom하게 생성한 logger 사용법은 'QueryController1,QueryController2'를 참고하자.
  ex) LoggerFactory.getLogger("SQL_LOG");

  - additivity는 상위 Logger의 속성을 상속 여부를 정한다.
  -->
  <logger name="SQL_LOG1" level="INFO" additivity="false">
    <appender-ref ref="QUERY"/>
  </logger>

  <logger name="SQL_LOG2" level="INFO" additivity="false">
    <appender-ref ref="QUERY"/>
  </logger>

</included>